# -*- coding: utf-8 -*-
"""expert_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nGaZLss9iSsF95nHpZAOF6qD3NsQzKv0

Nama : Putu Padmanaba

Email : naba17092004@gmail.com

Domisili : Denpasar, Bali

Beasiswa : IDcamp Indosat

#Data Collection

Dataset ini diambil dari: https://www.kaggle.com/datasets/adityakadiwal/water-potability
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import zipfile

"""####Instal Package Kaggle"""

! pip install -q kaggle

"""####Upload Json Profile Kaggle"""

from google.colab import files

files.upload()

"""####Membuat direktori dan mengatur izin agar bisa memasukan JSON Kaggle"""

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

"""####Mendownload Dataset"""

!kaggle datasets download -d adityakadiwal/water-potability

"""####Ekstrak Zipfile"""

local_zip = '/content/water-potability.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""####Memuat dataset ke dalam Pandas Dataframe"""

df = pd.read_csv("water_potability.csv")
df.head()

"""#Data Understanding

####Mengecek informasi dari dataset
"""

df.shape

df.info()

"""####Mengecek missing value"""

df.isnull().sum()

"""####Mengecek statistik dari data"""

df.describe()

"""####Mengecek persebaran features"""

df.hist(bins=50, figsize=(15,10))
plt.show()

"""####Mengecek distribusi data pada "Potability"""

plt.figure(figsize=(10,6))
sns.countplot(df,x="Potability")
plt.title("Safe drinking water ratio ", size =17)

"""####Melihat korelasi antar features"""

Corrmat = df.corr()
plt.subplots(figsize=(7,7))
sns.heatmap(Corrmat, cmap="YlGnBu", annot=True, fmt='.2f')
plt.show()

"""#Data preparation

####Menangani missing value
"""

phMean_0 = df[df['Potability'] == 0]['ph'].mean(skipna=True)
df.loc[(df['Potability'] == 0) & (df['ph'].isna()), 'ph'] = phMean_0
phMean_1 = df[df['Potability'] == 1]['ph'].mean(skipna=True)
df.loc[(df['Potability'] == 1) & (df['ph'].isna()), 'ph'] = phMean_1

SulfateMean_0 = df[df['Potability'] == 0]['Sulfate'].mean(skipna=True)
df.loc[(df['Potability'] == 0) & (df['Sulfate'].isna()), 'Sulfate'] = SulfateMean_0
SulfateMean_1 = df[df['Potability'] == 1]['Sulfate'].mean(skipna=True)
df.loc[(df['Potability'] == 1) & (df['Sulfate'].isna()), 'Sulfate'] = SulfateMean_1

TrihalomethanesMean_0 = df[df['Potability'] == 0]['Trihalomethanes'].mean(skipna=True)
df.loc[(df['Potability'] == 0) & (df['Trihalomethanes'].isna()), 'Trihalomethanes'] = TrihalomethanesMean_0
TrihalomethanesMean_1 = df[df['Potability'] == 1]['Trihalomethanes'].mean(skipna=True)
df.loc[(df['Potability'] == 1) & (df['Trihalomethanes'].isna()), 'Trihalomethanes'] = TrihalomethanesMean_1

df.head()

df.isnull().sum()

"""####Membagi dataset menjadi training set dan test set"""

from sklearn.model_selection import train_test_split

X = df.drop(['Potability'],axis=1)
y = df['Potability']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25,random_state=1)

#mengecek jumlah dataset
print(X_train.shape)
print(X_test.shape)

"""####Balancing data menggunakan SMOTE"""

from imblearn.over_sampling import SMOTE
from collections import Counter
print('Balancing the data menggunakan SMOTE\n')
smt = SMOTE()
counter = Counter(y_train)
print('Before SMOTE', counter)
X_train, y_train = smt.fit_resample(X_train, y_train)
counter = Counter(y_train)
print('\nAfter SMOTE', counter)

"""####Standarisasi"""

from sklearn.preprocessing import StandardScaler

features = ['ph',	'Hardness',	'Solids',	'Chloramines',	'Sulfate',	'Conductivity',	'Organic_carbon',	'Trihalomethanes',	'Turbidity'	]
scaler = StandardScaler()
scaler.fit(X_train.loc[:, features])
X_train_scaled = scaler.transform(X_train.loc[:, features])
X_train.loc[:, features] = X_train_scaled
X_train.head()

X_train.describe().round(3)

"""#Modeling

####Normalisasi dataset test
"""

from sklearn.preprocessing import StandardScaler

features = ['ph',	'Hardness',	'Solids',	'Chloramines',	'Sulfate',	'Conductivity',	'Organic_carbon',	'Trihalomethanes',	'Turbidity'	]
scaler = StandardScaler()
scaler.fit(X_test.loc[:, features])
X_test_scaled = scaler.transform(X_test.loc[:, features])
X_test.loc[:, features] = X_test_scaled
X_test.head()

"""####Liblary untuk metrix evaluasi model"""

from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score

"""####Dataframe untuk analisis akurasi model"""

models = pd.DataFrame(index=['accuracy', 'precision', 'recall', 'f1_score'],
                      columns=['KNN', 'SVM', 'Randomforest'])

"""####KNN"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=25)
knn.fit(X_train,y_train)

"""####SVC"""

from sklearn.svm import SVC

svc = SVC(C=5)
svc.fit(X_train,y_train)

"""####Random Forest"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=110,max_depth=16, random_state=123, n_jobs=1)
rf.fit(X_train,y_train)

"""#Evaluasi model

####Menghitung matrix evaluasi model
"""

# KNN
models.loc['accuracy', 'KNN'] = accuracy_score(y_pred=knn.predict(X_test),y_true=y_test)
models.loc['recall', 'KNN'] = recall_score(y_pred=knn.predict(X_test),y_true=y_test)
models.loc['precision', 'KNN'] = precision_score(y_pred=knn.predict(X_test),y_true=y_test)
models.loc['f1_score', 'KNN'] = f1_score(y_pred=knn.predict(X_test),y_true=y_test)
# SVC
models.loc['accuracy', 'SVM'] = accuracy_score(y_pred=svc.predict(X_test),y_true=y_test)
models.loc['recall', 'SVM'] = recall_score(y_pred=svc.predict(X_test),y_true=y_test)
models.loc['precision', 'SVM'] = precision_score(y_pred=svc.predict(X_test),y_true=y_test)
models.loc['f1_score', 'SVM'] = f1_score(y_pred=svc.predict(X_test),y_true=y_test)
# RandomForest
models.loc['accuracy', 'Randomforest'] = accuracy_score(y_pred=rf.predict(X_test),y_true=y_test)
models.loc['recall', 'Randomforest'] = recall_score(y_pred=rf.predict(X_test),y_true=y_test)
models.loc['precision', 'Randomforest'] = precision_score(y_pred=rf.predict(X_test),y_true=y_test)
models.loc['f1_score', 'Randomforest'] = f1_score(y_pred=rf.predict(X_test),y_true=y_test)

"""####Menanpilkan hasil evaluasi model"""

models